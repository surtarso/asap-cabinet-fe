name: Python CI for PyQt5 App

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/python-app.yml'
      - 'asap_cabinet_fe.py'
      - 'snd/*'
      - 'img/*'
  pull_request:
    branches:
      - main

jobs:
  test_build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies for app
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pyqt5 python3-pyqt5.qtmultimedia libpulse-mainloop-glib0 pulseaudio
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start pulseaudio daemon
        run: pulseaudio --start

      - name: Create test directories and files
        run: |
          mkdir -p /home/runner/Games/vpinball/build/tables/test
          touch /home/runner/Games/vpinball/build/tables/test/test_file.vpx
          touch /home/runner/Games/vpinball/VPinballX_GL

      - name: Set QT_QPA_PLATFORM to offscreen
        run: echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV

      - name: Install pytest
        run: pip install pytest pytest-qt sip

      - name: Run tests
        run: pytest --maxfail=1 --disable-warnings -q

      - name: Run the app (CI auto-exit)
        env:
          CI: "true"
        run: python3 asap_cabinet_fe.py

  build_nuitka:
    strategy:
      matrix:
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: kasa_cli
          mode: app

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }} Build
          # path: |
          #   build/*.exe
          #   build/*.bin
          #   build/*.app/**/*
          # include-hidden-files: true
          path: |
            build/*.exe
            build/*.bin
          include-hidden-files: true

  # build_linux_binary:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Install dependencies for binary
  #       run: |
  #         # Install Python and required dependencies
  #         sudo apt update
  #         sudo apt install -y python3 python3-pip python3-setuptools \
  #                            python3-dev build-essential python3-pyqt5.qtmultimedia\
  #                            libglib2.0-0 libsm6 libxext6 libxrender-dev
  #         # Install PyInstaller
  #         pip3 install pyinstaller pyqt5

  #     - name: Build Linux Executable
  #       run: |
  #         # Build the executable using pyinstaller
  #         python3 -m PyInstaller --onefile --add-data "img:img" --add-data "snd:snd" asap_cabinet_fe.py
      
  #     - name: Upload Linux Binary
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: asap_cabinet_fe-linux
  #         path: dist/asap_cabinet_fe

  # build_linux_deb:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Install dependencies for .deb package
  #       run: |
  #         # Install Ruby
  #         sudo apt update
  #         sudo apt install -y ruby-full
          
  #     - name: Build .deb Package
  #       run: |
  #         # Update PATH in the current shell to include the gem executables directory
  #         export PATH="$HOME/.local/share/gem/ruby/3.2.0/bin:$PATH"

  #         # Install fpm using the --user-install flag to avoid permission issues
  #         gem install --no-document fpm --user-install
          
  #         # Create necessary directories
  #         mkdir -p usr/local/bin
  #         mkdir -p opt/asap_cabinet_fe/img
  #         mkdir -p opt/asap_cabinet_fe/snd

  #         # Make sure the script is executable
  #         chmod +x asap-cabinet-fe
  #         chmod +x asap-cabinet-fe-x11

  #         # Copy files into the package structure
  #         cp asap-cabinet-fe opt/asap_cabinet_fe/
  #         cp asap-cabinet-fe-x11 opt/asap_cabinet_fe/
  #         cp asap_cabinet_fe.py opt/asap_cabinet_fe/
  #         cp -r img/* opt/asap_cabinet_fe/img/
  #         cp -r snd/* opt/asap_cabinet_fe/snd/
          
  #         # Build the .deb package using fpm
  #         fpm -s dir -t deb -n asap_cabinet_fe -v 1.0 --prefix / opt/asap_cabinet_fe
      
  #     - name: Upload .deb Package
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: asap_cabinet_fe-deb
  #         path: "*.deb"
      
  # build_windows:
  #   runs-on: windows-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install Python and dependencies
  #       run: |
  #         pip install pyinstaller sip
  #         pip install -r requirements.txt

  #     - name: Build Windows Executable
  #       run: pyinstaller --onefile --add-data "img;img" --add-data "snd;snd" asap_cabinet_fe.py

  #     - name: Upload Windows Binary
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: asap_cabinet_fe-windows
  #         path: dist/asap_cabinet_fe.exe

  # build_macos:
  #   runs-on: macos-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install Python and dependencies
  #       run: |
  #         # Ensure python3 is installed, skip if already present
  #         if ! command -v python3 &> /dev/null
  #         then
  #           brew install python3
  #         else
  #           echo "Python 3 is already installed"
  #         fi

  #         # Create and activate a virtual environment
  #         python3 -m venv venv
  #         source venv/bin/activate
          
  #         # Upgrade pip in the virtual environment and install dependencies
  #         python3 -m pip install --upgrade pip
  #         pip install pyqt5 pyinstaller

  #     - name: Build macOS Executable
  #       run: |
  #         # Ensure virtual environment is activated
  #         source venv/bin/activate
  #         pyinstaller --onefile --add-data "img:img" --add-data "snd:snd" asap_cabinet_fe.py

  #     - name: Upload macOS Binary
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: asap_cabinet_fe-macos
  #         path: dist/asap_cabinet_fe

  # package_source:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Package Source Code
  #       run: zip -r asap_cabinet_fe-1.0.zip asap_cabinet_fe.py img/ snd/

  #     - name: Upload Source Zip
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: asap_cabinet_fe-source
  #         path: asap_cabinet_fe-1.0.zip
